name: Release Binaries

permissions:
  contents: write

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    name: Build Artifacts
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-14
            target: aarch64-apple-darwin
          - os: macos-14
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install cross (Linux targets)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      - name: Package
        shell: bash
        run: |
          set -euo pipefail
          BIN=github-mcp
          OUTDIR=dist/${{ matrix.target }}
          mkdir -p "$OUTDIR"
          # Name outputs uniquely per target to avoid collisions when merging artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            SRC="target/${{ matrix.target }}/release/${BIN}.exe"
            FILENAME="${BIN}-${{ matrix.target }}.exe"
          else
            SRC="target/${{ matrix.target }}/release/${BIN}"
            FILENAME="${BIN}-${{ matrix.target }}"
          fi
          cp "$SRC" "$OUTDIR/$FILENAME"
          # Pre-hash sanity check to fail early (especially on Windows path issues)
          if [[ ! -f "$OUTDIR/$FILENAME" ]]; then
            echo "Expected file missing after copy: $OUTDIR/$FILENAME" >&2
            echo "Listing $OUTDIR contents:" && ls -la "$OUTDIR" || true
            exit 1
          fi
          # Export for PowerShell access via $Env:FILENAME
          export FILENAME
          # Write per-target checksum file inside each OUTDIR
          # Ensure the recorded filename matches the final uploaded binary name (no path prefix)
          case "${{ matrix.os }}" in
            ubuntu-latest)
              HASH=$(sha256sum "$OUTDIR/$FILENAME" | awk '{print $1}')
              ;;
            macos-14)
              HASH=$(shasum -a 256 "$OUTDIR/$FILENAME" | awk '{print $1}')
              ;;
            windows-latest)
              # Build Windows-native path using GITHUB_WORKSPACE and Join-Path; verify before hashing
              HASH=$(powershell -NoProfile -Command "
                $ErrorActionPreference = 'Stop'
                $root = $Env:GITHUB_WORKSPACE
                $p = Join-Path $root -ChildPath 'dist'
                $p = Join-Path $p -ChildPath '${{ matrix.target }}'
                $p = Join-Path $p -ChildPath $Env:FILENAME
                Write-Host ('Final file path (Windows): ' + $p)
                if (-not (Test-Path -LiteralPath $p)) {
                  Write-Host ('File not found: ' + $p)
                  exit 1
                }
                (Get-FileHash -Algorithm SHA256 -LiteralPath $p).Hash.ToLower()
              " | tail -n 1)
              ;;
            *) echo "Unsupported OS ${{ matrix.os }}" >&2; exit 1;;
          esac
          echo "$HASH  $FILENAME" > "$OUTDIR/SHA256SUMS-${{ matrix.target }}.txt"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: github-mcp-${{ matrix.target }}
          path: dist/${{ matrix.target }}/*

  release:
    name: Attach to Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: List artifacts
        run: ls -R dist
      - name: Combine checksums
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mapfile -t files < <(ls dist/*/SHA256SUMS-*.txt 2>/dev/null || true)
          echo "Found per-target checksum files: ${#files[@]}"
          if [[ ${#files[@]} -ne 5 ]]; then
            echo "Expected 5 per-target checksum files, found ${#files[@]}" >&2
            ls -R dist || true
            exit 1
          fi
          cat "${files[@]}" > dist/SHA256SUMS.txt
          echo "Combined checksums count:" && wc -l dist/SHA256SUMS.txt
          # Ensure only one SHA256SUMS.txt exists at root
          if [[ ! -f dist/SHA256SUMS.txt ]]; then echo "Missing dist/SHA256SUMS.txt" >&2; exit 1; fi
      - name: Collect binaries to dist root
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          # Move uniquely named binaries to dist/ root for release upload
          # Tight patterns per target family to avoid accidental matches
          patterns=(
            'dist/*/github-mcp-*-unknown-linux-gnu'
            'dist/*/github-mcp-*-apple-darwin'
            'dist/*/github-mcp-*-pc-windows-msvc.exe'
          )
          moved=()
          for pat in "${patterns[@]}"; do
            for f in $pat; do
              [[ -f "$f" ]] || continue
              mv -f "$f" dist/
              moved+=("$(basename "$f")")
            done
          done
          echo "Moved binaries: ${moved[*]:-none}"
          # Validate exactly 5 binaries are present in dist/
          mapfile -t bins < <(ls dist/github-mcp-* 2>/dev/null || true)
          echo "Binaries in dist/: ${#bins[@]}"
          if [[ ${#bins[@]} -ne 5 ]]; then
            echo "Expected 5 binaries in dist/, found ${#bins[@]}" >&2
            ls -l dist || true
            exit 1
          fi
          # Validate SHA256SUMS.txt only exists once and filenames match binaries
          if [[ $(ls dist/SHA256SUMS*.txt | wc -l) -ne 1 ]]; then
            echo "There should be exactly one SHA256SUMS.txt in dist/" >&2
            ls dist/SHA256SUMS*.txt || true
            exit 1
          fi
          # Compare filenames in checksums vs actual binaries
          sort <(awk '{print $2}' dist/SHA256SUMS.txt | xargs -n1 basename | sort -u) -o /tmp/check_names.txt
          sort <(for b in "${bins[@]}"; do basename "$b"; done | sort -u) -o /tmp/bin_names.txt
          if ! diff -u /tmp/bin_names.txt /tmp/check_names.txt; then
            echo "Mismatch between binaries and checksum entries" >&2
            echo "Binaries:"; cat /tmp/bin_names.txt
            echo "Checksums:"; cat /tmp/check_names.txt
            exit 1
          fi
          echo "Assets in dist/:" && ls -l dist/
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/github-mcp-*
            dist/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
