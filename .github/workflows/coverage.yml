name: Coverage

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    name: Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust 1.90.0 (with llvm-tools)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.90.0
          components: llvm-tools-preview

      - name: Enable cargo cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov (locked)
        run: cargo install cargo-llvm-cov@0.6.9 --locked

      - name: Install cargo-nextest (locked)
        run: cargo install cargo-nextest@0.9.68 --locked

      - name: Generate coverage (lcov + json)
        run: |
          # Run tests once without generating a report
          cargo llvm-cov nextest --workspace --no-report
          # Emit JSON report without rerunning tests
          cargo llvm-cov report --json --output-path coverage.json
          # Emit LCOV report without rerunning tests
          cargo llvm-cov report --lcov --output-path lcov.info

      # Compute a concise coverage summary without re-running tests
      - name: Compute coverage summary
        id: compute_summary
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const raw = fs.readFileSync('coverage.json', 'utf8');
              const json = JSON.parse(raw);
              const totals = json?.data?.[0]?.totals || {};
              const lines = totals.lines || {};
              const functions = totals.functions || {};
              const regions = totals.regions || {};
              const pct = (n) => (typeof n === 'number' ? n.toFixed(2) : 'N/A');
              const num = (n) => (typeof n === 'number' ? n : 'N/A');
              const message = [
                'Coverage summary',
                `- Lines: ${pct(lines.percent)}% (${num(lines.covered)}/${num(lines.count)})`,
                `- Functions: ${pct(functions.percent)}% (${num(functions.covered)}/${num(functions.count)})`,
                `- Regions: ${pct(regions.percent)}% (${num(regions.covered)}/${num(regions.count)})`
              ].join('\n');

              core.setOutput('message', message);
              await core.summary.addHeading('Coverage summary').addList([
                `Lines: ${pct(lines.percent)}% (${num(lines.covered)}/${num(lines.count)})`,
                `Functions: ${pct(functions.percent)}% (${num(functions.covered)}/${num(functions.count)})`,
                `Regions: ${pct(regions.percent)}% (${num(regions.covered)}/${num(regions.count)})`
              ]).write();
            } catch (err) {
              core.warning(`Failed to compute coverage summary: ${err.message}`);
              core.setOutput('message', 'Coverage summary not available');
            }

      # Post or update a sticky PR comment with coverage summary
      - name: Post PR coverage comment (sticky)
        if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork }}
        continue-on-error: true
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Coverage report
          message: ${{ steps.compute_summary.outputs.message }}

      - name: Upload coverage to Codecov
        if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork }}
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifacts
          path: |
            lcov.info
            coverage.json
