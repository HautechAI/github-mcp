name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint (fmt + clippy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: rustfmt
        run: cargo fmt --all -- --check
      - name: clippy
        run: cargo clippy --all-targets -- -D warnings

  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
      - uses: Swatinem/rust-cache@v2
      - name: Tests
        run: cargo test --locked --all-targets --all-features

  e2e:
    name: E2E (Inspector + Smoke)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Lint (clippy)
        run: cargo clippy --all-targets -- -D warnings
      - name: Build (release)
        run: cargo build --release --locked

      - name: Inspector tools/list
        timeout-minutes: 10
        run: |
          export MCP_DIAG_LOG="$GITHUB_WORKSPACE/mcp-diag.log"
          npx @modelcontextprotocol/inspector-cli --cli ./target/release/github-mcp --method tools/list --timeout-ms 30000 > out-tools.json || npx @modelcontextprotocol/inspector-cli --cli ./target/release/github-mcp --method tools/list > out-tools.json
          if [ -f out-tools.json ]; then cat out-tools.json; else echo "out-tools.json missing"; fi
          # Validate tools/list succeeded and includes a stable GitHub tool.
          node - <<'NODE'
          const fs=require('fs');
          const o=JSON.parse(fs.readFileSync('out-tools.json','utf8'));
          const tools = Array.isArray(o?.result?.tools) ? o.result.tools
                       : Array.isArray(o?.tools) ? o.tools
                       : Array.isArray(o) ? o
                       : null;
          if(!Array.isArray(tools) || tools.length===0) {
            console.error('invalid tools/list result');
            process.exit(1);
          }
          const names = new Set(tools.map(t=>t?.name));
          if(!(names.has('list_issues') || names.has('get_issue'))) {
            console.error('expected github tools missing');
            process.exit(1);
          }
          console.log('tools/list OK with', tools.length, 'tools');
          NODE
      - name: Smoke stdio LF-only
        run: |
          node ./scripts/smoke_stdio_lf.js ./target/release/github-mcp
      - name: Upload MCP diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-diag
          path: |
            mcp-diag.log
            diag-smoke.log
            out-tools.json

  e2e-live:
    name: E2E (live)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint, test]
    permissions:
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
      - uses: Swatinem/rust-cache@v2

      - name: Build (release)
        run: cargo build --release --locked

      - name: Setup Node and Inspector
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Doppler secrets
        uses: dopplerhq/cli-action@v2
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

      - name: Run E2E (read-only)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          E2E_OWNER: HautechAI
          E2E_REPO: github-mcp-test-repo
          E2E_ISSUE_NUM: '10'
          E2E_PR_NUM: '9'
        run: |
          set -euxo pipefail
          doppler run -p github-mcp -c dev -- bash ./scripts/e2e_live.sh

      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-live-artifacts
          path: |
            mcp-diag.log
            mcp-e2e.log
            out-*.json
